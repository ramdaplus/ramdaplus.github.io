[
  { 
    "heading": "_R.sum", 
    "desc": " Adds up all the elements of the array ", 
    "since": "0.0.1", 
    "arguments": [ { "arg": "array(Array)", "desc": "The array whose sum to be calculated" } ], 
    "returns": { "name": "(Number/Array)", "desc": "Returns a sum/array of sum if array of object is passed" }, 
    "example": "const array = [ 1,2,3,4  ]; \n _R.sum(array); \n // => 10 \n\n const arrayOfObjects = [ { a: 1, b: 3  }, { a: 2, b: 4  }  ]; \n _R.sum(arrayOfObjects, [ a, b  ]); \n // => [ 3, 7  ]"
  },
  { 
    "heading": "_R.filter", 
    "desc": "Filters the elements based on the given condition", 
    "since": "0.0.1", 
    "arguments": [ 
      { "arg": "array(Array)", "desc": "The array whose elements needs to be filtered" },
      { "arg": "object(Object)", "desc": "The object whose keys needs to be filtered" } 
    ], 
    "returns": { "name": "Array/Object", "desc": "returns array or object" }, 
    "example": "function isEven(val) { \n return val % 2 === 0; \n } \n function isEvenObject(val) { \n return val.a % 2 === 0; \n } \n _R.filter([1,2,3], isEven); \n //=> [ 2  ] \n _R.filter([{ a: 1, b: 'abc'  }, { a: 2, b: 'bcd'  }, { a: 3, b: 'cde'  }], isEvenObject); \n //=> [ { a: 2, b: 'bcd'  }  ] \n _R.filter( { a: 1, b: 2, c: 3  }, isEven ); \n //=> [ { b: 2  }  ]"
  }
]
