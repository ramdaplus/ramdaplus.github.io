[
  { 
    "heading": "_R.sum( array )", 
    "desc": " Adds up all the elements of the array ", 
    "since": "0.0.1", 
    "arguments": [ { "arg": "array(Array)", "desc": "The array whose sum to be calculated" } ], 
    "returns": { "name": "(Number/Array)", "desc": "Returns a sum/array of sum if array of object is passed" }, 
    "example": "const array = [ 1,2,3,4  ]; \n _R.sum(array); \n // => 10 \n\n const arrayOfObjects = [ { a: 1, b: 3  }, { a: 2, b: 4  }  ]; \n _R.sum(arrayOfObjects, [ a, b  ]); \n // => [ 3, 7  ]"
  },
  { 
    "heading": "_R.filter", 
    "desc": "Filters the elements based on the given condition", 
    "since": "0.0.1", 
    "arguments": [ 
      { "arg": "array(Array)", "desc": "The array whose elements needs to be filtered" },
      { "arg": "object(Object)", "desc": "The object whose keys needs to be filtered" } 
    ], 
    "returns": { "name": "Array/Object", "desc": "returns array or object" }, 
    "example": "function isEven(val) { \n return val % 2 === 0; \n } \n function isEvenObject(val) { \n return val.a % 2 === 0; \n } \n _R.filter([1,2,3], isEven); \n //=> [ 2  ] \n _R.filter([{ a: 1, b: 'abc'  }, { a: 2, b: 'bcd'  }, { a: 3, b: 'cde'  }], isEvenObject); \n //=> [ { a: 2, b: 'bcd'  }  ] \n _R.filter( { a: 1, b: 2, c: 3  }, isEven ); \n //=> [ { b: 2  }  ]"
  },
  { 
    "heading": "_R.find", 
    "desc": "Finds the first matched element in the array", 
    "since": "0.0.1", 
    "arguments": [ 
      { "arg": "array(Array)", "desc": "The array where element needs to be find" }
    ], 
    "returns": { "name": "Array", "desc": "returns array" }, 
    "example": "_R.find([1,2,3], 2); //=> [ 2  ] \n _R.find([{ a: 1, b: 'abc'  }, { a: 2, b: 'bcd'  }, { a: 3, b: 'cde'  }], 2, 'a'); //=> [ { a: 2, b: 'bcd'  }  ] \n _R.find([{ a: 1, b: 'abc'  }, { a: 2, b: 'bcd'  }, { a: 3, b: 'cde'  }], 'bcd', 'b'); //=> [ { a: 2, b: 'bcd'  }  ]"
  },
  { 
    "heading": "_R.map", 
    "desc": "Returns a new array after applying the function", 
    "since": "0.0.1", 
    "arguments": [ 
      { "arg": "array(Array)", "desc": "The array where function needs to be applied" },
      { "arg": "object(Object)", "desc": "The object where function needs to be applied" }
    ], 
    "returns": { "name": "Array/Object", "desc": "returns array or object" }, 
    "example": "function double(val) { \n return val * 2; \n } \n _R.map([1,2,3], double); //=> [2, 4, 6 ] \n _R.map({ a: 1, b: 2, c: 3  }, double); //=> { a: 2, b: 4, c: 6  } \n _R.map([ { a: 1, b: 2, c: 3  }, { d: 4, e: 5, f: 6  }  ], double); //=> [ { a: 2, b: 4, c: 6  }, { d: 8, e: 10, f: 12  }  ]"
  },
  { 
    "heading": "_R.fromPairs(pairs)", 
    "desc": "Returns an object composed of key-value pairs", 
    "since": "0.3.2", 
    "arguments": [ 
      { "arg": "pairs(Array)", "desc": "The Key-Value Pairs" }
    ], 
    "returns": { "name": "( Object )", "desc": "Returns new object" }, 
    "example": "_.fromPairs([['a', 1], ['b', 2]]); \n // => { 'a': 1, 'b': 2  }"
  },
  { 
    "heading": "_R.head(array)", 
    "desc": "Gets the first element of the array", 
    "since": "0.3.3", 
    "arguments": [ 
      { "arg": "array(Array)", "desc": "The array to query" }
    ], 
    "returns": { "name": "( * )", "desc": "Returns the first element of the array" }, 
    "example": "_.head([1, 2, 3]); \n // => 1 \n _.head([]); \n // => undefined"
  },
  { 
    "heading": "_R.merge( object, object )", 
    "desc": "Merges two objects upto first level", 
    "since": "0.1.3", 
    "arguments": [ 
      { "arg": "( Object )", "desc": "The object which needs to be merged" }
    ], 
    "returns": { "name": "( Object )", "desc": "Returns combined object" }, 
    "example": "const obj1 = { a: 1, b:2, c:3 }; \n const obj2 = {  a:4, d: 5, c: 6 } \n _R.merge(obj1, obj2) \n //=> { a: 4, b: 2, c: 6, d: 5 } \n const obj3 = { a:1, b:2, c:3, e: { a: 3  }  }; \n const obj4 = { a:4, d: 5, c: 6, e: { d: 5  } }; \n _R.merge(obj3, obj4) \n //=> { a: 4, b: 2, c: 6, e: { d: 5  }, d: 5  }"
  },
  { 
    "heading": "_R.camelCase( object )", 
    "desc": "Converts the object keys from SnakeCase to camelCase", 
    "since": "0.1.3", 
    "arguments": [ 
      { "arg": "( Object )", "desc": "The object" }
    ], 
    "returns": { "name": "( Object )", "desc": "Returns Object with camelCase keys" }, 
    "example": "const a = { Afc: 1, ffd: 2, FGf: { DFg: 23  }  }; \n _R.camelCase(a); \n //=> { afc: 1, ffd: 2, fGf: { dFg: 23  }  }"
  },
  { 
    "heading": "_R.intersection([ arrays ])", 
    "desc": "Creates an array of unique values that are included in all given array", 
    "since": "0.3.12", 
    "arguments": [ 
      { "arg": "[ arrays ] ( ...Array )", "desc": "The arrays to inspect" }
    ], 
    "returns": { "name": "( Array )", "desc": "Returns the new array of intersecting values." }, 
    "example": "_R.intersection( [ 1,2 ], [ 2,3 ] ); \n //=> [ 2 ]"
  },
  { 
    "heading": "_R.join( array, [ seperator=',' ] )", 
    "desc": "Converts all elements in array into a string separated by separator.", 
    "since": "0.3.13", 
    "arguments": [ 
      { "arg": "array ( Array )", "desc": "The array to convert" },
      { "arg": "[ seperator=',' ] ( string )", "desc": "The element seperator" }
    ], 
    "returns": { "name": "(string)", "desc": "Returns a joined sgtring" }, 
    "example": "_.join(['a', 'b', 'c'], '~'); \n // => 'a~b~c'"
  },
  { 
    "heading": "_R.last( array )", 
    "desc": "Gets the last element of the array.", 
    "since": "0.3.14", 
    "arguments": [ 
      { "arg": "array ( Array )", "desc": "The array to query" }
    ], 
    "returns": { "name": "( * )", "desc": "Returns the last element of the array" }, 
    "example": "_.last([ 1, 2, 3 ]); \n // => '3'"
  },
  { 
    "heading": "_R.reverse(array)", 
    "desc": "Reverses array so that the first element becomes the last, the second element becomes the second to last, and so on.", 
    "since": "0.3.16", 
    "arguments": [ 
      { "arg": "array ( Array )", "desc": "The array to modify" }
    ], 
    "returns": { "name": "( Array )", "desc": "Returns array" }, 
    "example": "var array = [ 1, 2, 3 ]\n _R.reverse(array) \n //=> [ 3, 2, 1 ]"
  },
  { 
    "heading": "_R.toPairs(object)", 
    "desc": "Converts an object into an array of key, value arrays. Only the object's own properties are used. Note that the order of the output array is not guaranteed to be consistent across different JS platforms.", 
    "since": "0.3.17", 
    "arguments": [ 
      { "arg": "object ( Object )", "desc": "The object which needs to split" }
    ], 
    "returns": { "name": "( Array )", "desc": "Returns array" }, 
    "example": "var object = { a: 1, b: 2 }\n _R.toPairs(object) \n //=> [ [ 'a', 1 ], [ 'b', 2 ] ]"
  },
  { 
    "heading": "_R.invertObj(object)", 
    "desc": "Returns a new object with the keys of the given object as values, and the values of the given object, which are coerced to strings, as keys. Note that the last key found is preferred when handling the same value.", 
    "since": "0.3.18", 
    "arguments": [ 
      { "arg": "object ( Object )", "desc": "The object needs to be inverted" }
    ], 
    "returns": { "name": "object ( Object )", "desc": "Returns inverted object" }, 
    "example": "var raceResults = { \n first: 'alice', \n second: 'jake' \n }; \n _R.invertObj(raceResults); \n //=> { 'alice': 'first', 'jake':'second'  } \n "
  }
]
